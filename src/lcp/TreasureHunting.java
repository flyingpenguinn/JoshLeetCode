package lcp;

import java.awt.image.AreaAveragingScaleFilter;
import java.util.*;

public class TreasureHunting {
    // bfs to get min path between stone and position
    // then CACHE distances between positions when stone fetching is included
    // finally do a tsp on traps
    int Max = 100000;

    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int minimalSteps(String[] graph) {
        int m = graph.length;
        int n = graph[0].length();
        char[][] a = tochararray(graph, m, n);
        // from stone to start and traps
        Map<Integer, Map<Integer, Integer>> stone = new HashMap<>();
        Map<Integer, Integer> end = new HashMap<>();
        List<Integer> traps = new ArrayList<>();
        int start = -1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int code = tocode(n, i, j);
                if (a[i][j] == 'O') {
                    Map<Integer, Integer> v = bfs(a, i, j);
                    stone.put(code, v);
                } else if (a[i][j] == 'M') {
                    traps.add(code);
                } else if (a[i][j] == 'S') {
                    start = code;
                } else if (a[i][j] == 'T') {
                    end = bfs(a, i, j);
                }
            }
        }
        Map<Integer, Map<Integer, Integer>> finger = new HashMap<>();
        traps.add(start);
        for (int i = 0; i < traps.size(); i++) {
            Map<Integer, Integer> vm = new HashMap<>();
            for (int j = 0; j < traps.size() - 1; j++) {// excluding start dont need to calc it
                if (i == j) {
                    continue;
                }
                int min = Integer.MAX_VALUE;
                for (int s : stone.keySet()) {
                    int tostone = stone.get(s).getOrDefault(traps.get(i), Max);
                    int totrap = stone.get(s).getOrDefault(traps.get(j), Max);
                    int cur = tostone + totrap;
                    min = Math.min(min, cur);
                }
                vm.put(traps.get(j), min);
                finger.put(traps.get(i), vm);
            }
        }
        traps.remove(traps.size() - 1);
        //  System.out.println("done bfs");
        int rt = dom(start, 0, traps, end, finger);
        //   System.out.println("done dom");
        return rt >= Max ? -1 : rt;
    }

    Map<Integer, Map<Integer, Integer>> dp = new HashMap<>();

    private int dom(int start, int status, List<
            Integer> traps, Map<Integer, Integer> endmap, Map<Integer, Map<Integer, Integer>> finger) {
        int tn = traps.size();
        if (status + 1 == (1 << tn)) {
            return endmap.getOrDefault(start, Max);
        }
        Map<Integer, Integer> cm = dp.getOrDefault(start, new HashMap<>());
        Integer ch = cm.get(status);
        if (ch != null) {
            return ch;
        }
        int alltraps = traps.size();
        int min = Max;
        for (int i = 0; i < alltraps; i++) {
            if (((status >> i) & 1) == 1) {
                continue;
            }
            int cost = finger.get(start).getOrDefault(traps.get(i), Max);
            if (cost == Max) {
                continue;
            }
            if (cost >= min) {
                continue;
            }
            int nst = status | (1 << i);
            int cur = cost + dom(traps.get(i), nst, traps, endmap, finger);
            min = Math.min(min, cur);
        }

        cm.put(status, min);
        dp.put(start, cm);
        return min;
    }


    private Map<Integer, Integer> bfs(char[][] a, int i, int j) {
        Map<Integer, Integer> r = new HashMap<>();
        int m = a.length;
        int n = a[0].length;
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[]{tocode(n, i, j), 0});
        Set<Integer> seen = new HashSet<>();
        while (!q.isEmpty()) {
            int[] top = q.poll();
            int ci = top[0] / n;
            int cj = top[0] % n;
            if (a[ci][cj] == 'M' || a[ci][cj] == 'S') {
                r.put(tocode(n, ci, cj), top[1]);
            }
            int nd = top[1] + 1;
            for (int[] d : dirs) {
                int ni = ci + d[0];
                int nj = cj + d[1];
                int code = tocode(n, ni, nj);
                if (ni >= 0 && ni < m && nj >= 0 && nj < n && a[ni][nj] != '#' && !seen.contains(code)) {
                    seen.add(code);
                    q.offer(new int[]{code, nd});
                }
            }
        }
        return r;
    }

    protected int tocode(int n, int i, int j) {
        return i * n + j;
    }


    protected char[][] tochararray(String[] graph, int m, int n) {
        char[][] a = new char[m][n];
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = graph[i].charAt(j);
            }
        }
        return a;
    }


    public static void main(String[] args) {
        System.out.println(new TreasureHunting().minimalSteps(new String[]{}));
        /*System.out.println(new TreasureHunting().minimalSteps(new String[]{"S#O", "M..", "M.T"}));
        System.out.println(new TreasureHunting().minimalSteps(new String[]{"S#O", "M.T", "M.."}));
         System.out.println(new TreasureHunting().minimalSteps(new String[]{"S.#.M", "O.#.O", "M.#.T"}));
        System.out.println(new TreasureHunting().minimalSteps(new String[]{"S#O", "M.#", "M.T"}));

          System.out.println(new TreasureHunting().minimalSteps(new String[]{"MM#", "OO#", "OST", "#M#", "M.M", "MMM", "##O"}));
*/


    }
}
