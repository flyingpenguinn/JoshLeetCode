import java.util.Arrays;

/*
LC#639
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
 */
public class DecodeWaysII {

    private int Mod = 1000000007;

    private long[] dp;

    public int numDecodings(String s) {
        // check null or other invalid input, error if needed
        // must be positive numbers 0-9 and *
        dp = new long[s.length() + 1];
        Arrays.fill(dp, -1);
        return (int) solve(s, 0);
    }


    private long solve(String s, int i) {
        if (i == s.length()) {
            return 1; // base. if single 2, we have one way
        }
        if (dp[i] != -1) {
            return dp[i];
        }
        char c = s.charAt(i);
        if (c == '0') {
            return 0;
        }
        int start = 1;
        int end = 9;
        if (c != '*') {
            start = c - '0';
            end = start;
        }
        long ways = (end - start + 1) * solve(s, i + 1);
        if (i + 1 < s.length()) {
            int nstart = 1;
            int nend = 9;
            char nc = s.charAt(i + 1);
            if (nc != '*') {
                nstart = nc - '0';
                nend = nstart;
            }
            // can't be an outright 2: what if end is 1?
            for (int j = start; j <= Math.min(2, end); j++) {
                for (int k = nstart; k <= nend; k++) {
                    int cur = j * 10 + k;
                    if (cur <= 26) {
                        ways += solve(s, i + 2);
                    }
                }
            }
        }
        long res = ways % Mod;
        dp[i] = (int) res;
        return dp[i];
    }

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        System.out.println(new DecodeWaysII().numDecodings("1***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***2"));
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }
}
