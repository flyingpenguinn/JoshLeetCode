import java.util.Arrays;

/*
LC#639
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
 */
public class DecodeWaysII {
    long[] dp;
    long Mod = 1000000007L;

    public int numDecodings(String s) {
        dp = new long[s.length()];
        Arrays.fill(dp, -1);
        return (int) don(0, s.toCharArray());
    }

    long don(int i, char[] s) {
        int n = s.length;
        if (i == n) {
            return 1;
        }
        // 0 can't be the start, can only be attached to 1
        if (s[i] == '0') {
            return 0;
        }
        if (dp[i] != -1) {
            return dp[i];
        }
        int curstart = s[i] != '*' ? s[i] - '0' : 1;
        int curend = s[i] != '*' ? s[i] - '0' : 9;
        long way1 = (curend - curstart + 1) * don(i + 1, s);
        int valids = 0;
        if (i + 1 < n) {
            int nextstart = s[i + 1] != '*' ? s[i + 1] - '0' : 1;
            int nextend = s[i + 1] != '*' ? s[i + 1] - '0' : 9;
            for (int j = curstart; j <= Math.min(3,curend); j++) {
                for (int k = nextstart; k <= nextend; k++) {
                    int num = j * 10 + k;
                    if (num >= 1 && num <= 26) {
                        valids++;
                    }
                }
            }
        }
        long way2 = i == n - 1 ? 0 : valids * don(i + 2, s);
        long rt = (way1 + way2) % Mod;
        dp[i] = (int) rt;
        return dp[i];
    }

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        System.out.println(new DecodeWaysII().numDecodings("1***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***2"));
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }
}
