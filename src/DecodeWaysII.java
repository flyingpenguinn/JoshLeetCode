import java.util.Arrays;

/*
LC#639
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
 */
public class DecodeWaysII {


    long Mod = 1000000007;
    long[] dp;

    public int numDecodings(String s) {
        dp = new long[s.length()];
        Arrays.fill(dp, -1);
        return (int) don(0, s);
    }

    private long don(int i, String s) {
        int n = s.length();
        if (i == n) {
            return 1l;
        }
        char c = s.charAt(i);
        if (c == '0') {
            return 0;
        }
        if (dp[i] != -1) {
            return dp[i];
        }
        long rt = 0;
        int cstart = c == '*' ? 1 : c - '0';
        int cend = c == '*' ? 9 : c - '0';
        for (int j = cstart; j <= cend; j++) {
            rt += don(i + 1, s);
            rt %= Mod;
        }
        if (i + 1 < n) {
            char c1 = s.charAt(i + 1);
            int c1start = c1 == '*' ? 1 : c1 - '0';
            int c1end = c1 == '*' ? 9 : c1 - '0';
            for (int j = cstart; j <= cend; j++) {
                for (int k = c1start; k <= c1end; k++) {
                    int v = j * 10 + k;
                    if (v >= 1 && v <= 26) {
                        rt += don(i + 2, s);
                        rt %= Mod;
                    }
                }
            }
        }
        dp[i] = rt;
        return rt;
    }

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        System.out.println(new DecodeWaysII().numDecodings("1***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***21***3*9*1*4***2"));
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }
}
